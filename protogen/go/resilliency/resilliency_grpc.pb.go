// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: resilliency/resilliency.proto

package resilliency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResilliencyService_Unaryresilliency_FullMethodName                  = "/resilliency.ResilliencyService/Unaryresilliency"
	ResilliencyService_ServerStreamingResilliency_FullMethodName        = "/resilliency.ResilliencyService/ServerStreamingResilliency"
	ResilliencyService_ClientStreamingResilliency_FullMethodName        = "/resilliency.ResilliencyService/ClientStreamingResilliency"
	ResilliencyService_BidirectionalStreamingResilliency_FullMethodName = "/resilliency.ResilliencyService/BidirectionalStreamingResilliency"
)

// ResilliencyServiceClient is the client API for ResilliencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResilliencyServiceClient interface {
	Unaryresilliency(ctx context.Context, in *ResilliencyRequest, opts ...grpc.CallOption) (*ResilliencyResponse, error)
	ServerStreamingResilliency(ctx context.Context, in *ResilliencyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResilliencyResponse], error)
	ClientStreamingResilliency(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ResilliencyRequest, ResilliencyResponse], error)
	BidirectionalStreamingResilliency(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResilliencyRequest, ResilliencyResponse], error)
}

type resilliencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResilliencyServiceClient(cc grpc.ClientConnInterface) ResilliencyServiceClient {
	return &resilliencyServiceClient{cc}
}

func (c *resilliencyServiceClient) Unaryresilliency(ctx context.Context, in *ResilliencyRequest, opts ...grpc.CallOption) (*ResilliencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResilliencyResponse)
	err := c.cc.Invoke(ctx, ResilliencyService_Unaryresilliency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resilliencyServiceClient) ServerStreamingResilliency(ctx context.Context, in *ResilliencyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResilliencyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResilliencyService_ServiceDesc.Streams[0], ResilliencyService_ServerStreamingResilliency_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResilliencyRequest, ResilliencyResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResilliencyService_ServerStreamingResilliencyClient = grpc.ServerStreamingClient[ResilliencyResponse]

func (c *resilliencyServiceClient) ClientStreamingResilliency(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ResilliencyRequest, ResilliencyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResilliencyService_ServiceDesc.Streams[1], ResilliencyService_ClientStreamingResilliency_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResilliencyRequest, ResilliencyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResilliencyService_ClientStreamingResilliencyClient = grpc.ClientStreamingClient[ResilliencyRequest, ResilliencyResponse]

func (c *resilliencyServiceClient) BidirectionalStreamingResilliency(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResilliencyRequest, ResilliencyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResilliencyService_ServiceDesc.Streams[2], ResilliencyService_BidirectionalStreamingResilliency_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResilliencyRequest, ResilliencyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResilliencyService_BidirectionalStreamingResilliencyClient = grpc.BidiStreamingClient[ResilliencyRequest, ResilliencyResponse]

// ResilliencyServiceServer is the server API for ResilliencyService service.
// All implementations must embed UnimplementedResilliencyServiceServer
// for forward compatibility.
type ResilliencyServiceServer interface {
	Unaryresilliency(context.Context, *ResilliencyRequest) (*ResilliencyResponse, error)
	ServerStreamingResilliency(*ResilliencyRequest, grpc.ServerStreamingServer[ResilliencyResponse]) error
	ClientStreamingResilliency(grpc.ClientStreamingServer[ResilliencyRequest, ResilliencyResponse]) error
	BidirectionalStreamingResilliency(grpc.BidiStreamingServer[ResilliencyRequest, ResilliencyResponse]) error
	mustEmbedUnimplementedResilliencyServiceServer()
}

// UnimplementedResilliencyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResilliencyServiceServer struct{}

func (UnimplementedResilliencyServiceServer) Unaryresilliency(context.Context, *ResilliencyRequest) (*ResilliencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unaryresilliency not implemented")
}
func (UnimplementedResilliencyServiceServer) ServerStreamingResilliency(*ResilliencyRequest, grpc.ServerStreamingServer[ResilliencyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingResilliency not implemented")
}
func (UnimplementedResilliencyServiceServer) ClientStreamingResilliency(grpc.ClientStreamingServer[ResilliencyRequest, ResilliencyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingResilliency not implemented")
}
func (UnimplementedResilliencyServiceServer) BidirectionalStreamingResilliency(grpc.BidiStreamingServer[ResilliencyRequest, ResilliencyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingResilliency not implemented")
}
func (UnimplementedResilliencyServiceServer) mustEmbedUnimplementedResilliencyServiceServer() {}
func (UnimplementedResilliencyServiceServer) testEmbeddedByValue()                            {}

// UnsafeResilliencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResilliencyServiceServer will
// result in compilation errors.
type UnsafeResilliencyServiceServer interface {
	mustEmbedUnimplementedResilliencyServiceServer()
}

func RegisterResilliencyServiceServer(s grpc.ServiceRegistrar, srv ResilliencyServiceServer) {
	// If the following call pancis, it indicates UnimplementedResilliencyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResilliencyService_ServiceDesc, srv)
}

func _ResilliencyService_Unaryresilliency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResilliencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResilliencyServiceServer).Unaryresilliency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResilliencyService_Unaryresilliency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResilliencyServiceServer).Unaryresilliency(ctx, req.(*ResilliencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResilliencyService_ServerStreamingResilliency_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResilliencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResilliencyServiceServer).ServerStreamingResilliency(m, &grpc.GenericServerStream[ResilliencyRequest, ResilliencyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResilliencyService_ServerStreamingResilliencyServer = grpc.ServerStreamingServer[ResilliencyResponse]

func _ResilliencyService_ClientStreamingResilliency_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResilliencyServiceServer).ClientStreamingResilliency(&grpc.GenericServerStream[ResilliencyRequest, ResilliencyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResilliencyService_ClientStreamingResilliencyServer = grpc.ClientStreamingServer[ResilliencyRequest, ResilliencyResponse]

func _ResilliencyService_BidirectionalStreamingResilliency_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResilliencyServiceServer).BidirectionalStreamingResilliency(&grpc.GenericServerStream[ResilliencyRequest, ResilliencyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResilliencyService_BidirectionalStreamingResilliencyServer = grpc.BidiStreamingServer[ResilliencyRequest, ResilliencyResponse]

// ResilliencyService_ServiceDesc is the grpc.ServiceDesc for ResilliencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResilliencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resilliency.ResilliencyService",
	HandlerType: (*ResilliencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unaryresilliency",
			Handler:    _ResilliencyService_Unaryresilliency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingResilliency",
			Handler:       _ResilliencyService_ServerStreamingResilliency_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingResilliency",
			Handler:       _ResilliencyService_ClientStreamingResilliency_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingResilliency",
			Handler:       _ResilliencyService_BidirectionalStreamingResilliency_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "resilliency/resilliency.proto",
}
